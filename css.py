import cssutils
import logging
import re
import os

# Disable logging
cssutils.log.setLevel(logging.FATAL)

# Definitions
STYLE_RULE = 1


def toStylesheet(filename):
    if os.path.exists(filename):
        return cssutils.parseFile(filename)
    return cssutils.parseUrl(filename)


def saveStyleSheetAs(sheet, filename):
    f = open(filename, "wb")
    f.write(sheet.cssText)


def saveMinifiedStylesheetAs(sheet, filename):
    cssutils.ser.prefs.useMinified()
    saveStyleSheetAs(sheet, filename)
    cssutils.ser.prefs.useDefaults()


def cleanCSS(report):
    cssFilename, flaws = report
    sheet = toStylesheet(cssFilename)
    # create identical copy for output
    cleanSheet = toStylesheet(cssFilename)
    # confine ourselves to {G} elements, for now
    splitFlaws = map(lambda x: (map(lambda y: y.split('}')[1], x), map(lambda y: y.split('}')[0][1:], x)), flaws)
    finalFlaws = {}
    for keys, values in splitFlaws:
        finalFlaws[', '.join(keys)] = values
    divider = re.compile(r'(.*) {')
    # need to track indices
    offset = 0
    for i in range(len(sheet.cssRules)):
        rule = sheet.cssRules[i]
        if not rule.type == STYLE_RULE or not rule.cssText:
            continue
        m = divider.search(rule.cssText)
        if m.group(1) in finalFlaws:
            # aggregate all non-green terms
            newSelector = ""
            for s, c in zip(m.group(1).split(', '), finalFlaws[m.group(1)]):
                if c == 'G':
                    continue
                if newSelector:
                    newSelector += ", "
                newSelector += s
            # if any selectors remaining, must keep rule
            if not newSelector:
                cleanSheet.deleteRule(i - offset)
                offset += 1
            else:
                cleanSheet.cssRules[i - offset].selectorText = newSelector
    return cleanSheet


def logStatistics(initialSheet, finalSheet):
    # Report number of rules removed
    diff = len(initialSheet.cssRules) - len(finalSheet.cssRules)
    # Save final sheet to temp file
    saveMinifiedStylesheetAs(finalSheet, 'temp_final')
    final_size = os.path.getsize('temp_final')
    # Report compression ratio
    saveStyleSheetAs(initialSheet, 'temp')
    compression_ratio = 100.0 * os.path.getsize('temp') / final_size
    # Report compression ratio over minified initial
    saveMinifiedStylesheetAs(initialSheet, 'temp_min')
    compression_ratio_min = 100.0 * os.path.getsize('temp_min') / final_size
    # Remove temp files
    os.remove('temp')
    os.remove('temp_min')
    os.remove('temp_final')
    print 'Output file: %d bytes.\nRemoved %d rules.\nSaved %.2f%% over original.\nSaved %.2f%% over minified original.' % (final_size, diff, compression_ratio, compression_ratio_min)


def parseReport(report_filename, log_statistics=False):
    """Parse a report generated by Helium and produce 'clean' versions of each named stylesheet.

    Keyword arguments:
    report_filename -- the name of the report file generated by Helium

    """
    report = open(report_filename, "r").read()
    report = report.replace('\r\n', '\n')
    # first element is a syntax guide
    sheetReports = report.split('Stylesheet: ')[1:]
    # remove extraneous whitespace, split by line
    splitSheetReports = map(lambda x: filter(lambda y: len(y.strip()) > 0, x.split('\n')), sheetReports)
    # split individual lines by comma-separated entries
    splitSheetReports = map(lambda x: map(lambda y: y.split(', '), x), splitSheetReports)
    # split reports into (name, flaws)
    namedSheetReports = map(lambda x: (x[0][0], x[1:]), splitSheetReports)
    for r in namedSheetReports:
        improvedCSS = cleanCSS(r)
        improvedCSS_filename = r[0].split('/')[-1].replace('.css', '-clean.css')
        saveMinifiedStylesheetAs(improvedCSS, improvedCSS_filename)
        if log_statistics:
            # Parse initial stylesheet
            initialCSS_filename = r[0]
            initialCSS = toStylesheet(initialCSS_filename)
            # Print sheet title
            print "* %s:" % initialCSS_filename
            # Call logging function
            logStatistics(initialCSS, improvedCSS)
